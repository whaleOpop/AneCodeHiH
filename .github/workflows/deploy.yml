name: Deploy Vue 3 + Vite App with Docker

on:
  push:
    branches:
      - frontend

env:
  IMAGE_NAME: ghcr.io/whaleopop/anecode-frontend

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Keys and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add host to known_hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Debug SSH Setup
        run: |
          ls -la ~/.ssh
          cat ~/.ssh/id_ed25519 || echo "SSH private key is invalid or missing"

      - name: Start ssh-agent and add SSH key
        run: |
          eval $(ssh-agent -s)
          ssh-add -v ~/.ssh/id_ed25519

      - name: Install OpenSSH Client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Execute remote commands with sshpass
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -v root@${{ secrets.SSH_HOST }} << 'EOF'
          if ! id -u deploy_user &>/dev/null; then
            useradd -m deploy_user
            echo "deploy_user:password" | chpasswd
            usermod -aG docker deploy_user
          fi
          EOF

      - name: Stop and delete existing Docker container
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -v root@${{ secrets.SSH_HOST }} << 'EOF'
          if docker ps -a --format '{{.Names}}' | grep -Eq '^docker-db$'; then
            docker stop docker-db && docker rm docker-db
          fi
          EOF

      - name: Copy Docker image to the remote server and deploy
        run: |
          # Save the Docker image as a tar file
          docker save ${{ env.IMAGE_NAME }} | gzip > anecode-frontend.tar.gz
          
          # Copy the Docker image tar file to the remote server
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no anecode-frontend.tar.gz root@${{ secrets.SSH_HOST }}:/tmp/

          # Load the Docker image on the remote server
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -v root@${{ secrets.SSH_HOST }} << 'EOF'
          docker load -i /tmp/anecode-frontend.tar.gz
          docker rm -f anecode-frontend || true
          docker run -d --name anecode-frontend -p 80:80 ${{ env.IMAGE_NAME }}
          EOF
